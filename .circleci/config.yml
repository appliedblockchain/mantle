# TODO: Utilise workflows for parallel builds
version: 2
defaults: &defaults
  working_directory: ~/mantle

references:
  install_awscli: &install_awscli
    run:
      name: Install AWS CLI
      command: |
        sudo pip install awscli --upgrade
  add_aws_credentials: &add_aws_credentials
    run:
      name: Set AWS Credentials
      command: |
        aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
        aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
  generate_docs: &generate_docs
    run:
      name: Generate SDK docs
      command: cd sdk && npm i && ./node_modules/.bin/esdoc
  deploy_to_s3: &deploy_to_s3
    run:
      name: Upload to S3
      command: |
        echo "Copying files to server..."
        aws s3 sync sdk/docs "s3://$S3_BUCKET_NAME" --size-only --delete

jobs:
  build:
    <<: *defaults
    docker:
    # Primary docker container
    - image: circleci/node:10.7
    - image: appliedblockchain/parity-solo:latest
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASSWORD
    - image: appliedblockchain/ipfs-solo:latest
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASSWORD


    steps:
      - checkout

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      - run:
          name: Authorize NPM
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-api-{{ checksum "api/package.json" }}
          - v1-sdk-{{ checksum "sdk/package.json" }}
          - v1-server-sdk-{{ checksum "server-sdk/package.json" }}
          # Fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      
      - run:
          name: yarn install sdk
          command: cd ~/mantle/sdk && yarn install

      - run:
          name: yarn install api
          command: cd ~/mantle/api && yarn install
    
      - run:
          name: yarn install server-sdk
          command: cd ~/mantle/server-sdk && yarn install

      - save_cache:
          key: v1-api-{{ checksum "api/package.json" }}
          paths:
            - /api/node_modules
      
      - save_cache:
          key: v1-sdk-{{ checksum "sdk/package.json" }}
          paths:
            - /sdk/node_modules

      - save_cache:
          key: v1-server-sdk-{{ checksum "server-sdk/package.json" }}
          paths:
            - /server-sdk/node_modules
    
      - setup_remote_docker

      - run:
          name: api server
          command: cd ~/mantle/api && npm run start
          background: true

      # Wait for the server to load before running tests
      - run: dockerize -wait tcp://localhost:3000 -timeout 20s
      - run:
          name: run circleci
          command: cd ~/mantle/sdk && npm run circleci
      - run:
          name: run server-sdk tests
          command: cd ~/mantle/server-sdk && npm test

  upload_docs:
    <<: *defaults
    docker:
      - image: circleci/node:10.7-alpine
    environment:
      S3_BUCKET_NAME: mantle-docs
    steps:
      - checkout
      - run:
          name: debugging
          command: touch ~/mantle/debugging.txt

      - run:
          name: install python with apk
          command: apk --update --no-cache add alpine-sdk git python curl bash && rm -rf /tmp/* /var/cache/apk/*
      # - run:
      #     name: Install AWS CLI
      #     command: |
      #       sudo pip install awscli --upgrade
      # - run:
      #     name: Set AWS Credentials
      #     command: |
      #       aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
      #       aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
      # - run:
      #     name: Generate SDK docs
      #     command: cd ~/mantle/sdk && ./node_modules/.bin/esdoc
      # - run:
      #     name: Upload to S3
      #     command: |
      #       echo "Copying files to server..."
      #       aws s3 sync ~/mantle/sdk/docs "s3://$S3_BUCKET_NAME" --size-only --delete
      - attach_workspace:
          at: ./
      - *install_awscli
      - *add_aws_credentials
      - *generate_docs
      - *deploy_to_s3


workflows:
  version: 2
  run_all:
    jobs:
      - build
      - upload_docs:
          requires:
            - build

          # type: approval