# TODO: Utilise workflows for parallel builds
version: 2
jobs:
  build:
    docker:
    # Primary docker container
    - image: circleci/node:10.7
    - image: appliedblockchain/parity-solo:latest
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASSWORD
    - image: appliedblockchain/ipfs-solo:latest
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASSWORD

    working_directory: ~/mantle

    steps:
      - checkout

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0

      - run:
          name: Authorize NPM
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-api-{{ checksum "api/package.json" }}
          - v1-sdk-{{ checksum "sdk/package.json" }}
          - v1-server-sdk-{{ checksum "server-sdk/package.json" }}
          # Fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: yarn install sdk
          command: cd ~/mantle/sdk && yarn install

      - run:
          name: yarn install api
          command: cd ~/mantle/api && yarn install

      - run:
          name: yarn install server-sdk
          command: cd ~/mantle/server-sdk && yarn install

      - save_cache:
          key: v1-api-{{ checksum "api/package.json" }}
          paths:
            - /api/node_modules

      - save_cache:
          key: v1-sdk-{{ checksum "sdk/package.json" }}
          paths:
            - /sdk/node_modules

      - save_cache:
          key: v1-server-sdk-{{ checksum "server-sdk/package.json" }}
          paths:
            - /server-sdk/node_modules

      - setup_remote_docker

      - run:
          name: api server
          command: cd ~/mantle/api && npm run start
          background: true

      # Wait for the server to load before running tests
      - run: dockerize -wait tcp://localhost:3000 -timeout 20s
      - run:
          name: run circleci
          command: cd ~/mantle/sdk && npm run circleci
      - run:
          name: run api tests
          command: cd ~/mantle/api && npm test
      - run:
          name: run circleci integration tests
          command: cd ~/mantle/sdk && node bin/deployTestToken.js && source exportTestAddresses.sh && npm run circleci-integration
      - run:
          name: run server-sdk tests
          command: cd ~/mantle/server-sdk && npm test

  update_docs:
    branches:
      only: circleci-doc-upload
    docker:
    - image: appliedblockchain/aws-cli
      auth:
        username: $DOCKER_USER
        password: $DOCKER_PASSWORD

    working_directory: ~/mantle

    steps:
      - checkout
      - run:
          name: s3 upload
          command: aws s3 cp ~/mantle/sdk/docs s3://mantle-docs.appliedblockchain.com --recursive